`define TRUE 1'b1
`define FALSE 1'b0

// Delays

module traffic (hwy, cntry, X, clock, clear);

// I/O ports
output reg [1:0] hwy, cntry; // 2 bit output for 3 states of signal GREEN, YELLOW, RED
// reg [1:0] hwy, cntry; // declare output signals are registers
input X;        // if TRUE, indicates that there is car on the country road, otherwise FALSE
input clock, clear;

// Status of lights
parameter RED    = 2'd0,
          YELLOW = 2'd1,
          GREEN  = 2'd2;

// State definition         HWY       CNTRY
parameter S0 = 3'd0; //     GREEN     RED
parameter S1 = 3'd1; //     YELLOW    RED
parameter S2 = 3'd2; //     RED       RED
parameter S3 = 3'd3; //     RED       GREEN
parameter S4 = 3'd4; //     RED       YELLOW

// Internal state variables
reg [2:0] state;
reg [2:0] next_state;

// state changes only at positive edge of clock
always @(posedge clock)
    if (clear)
        state <= S0;
    else
        state <= next_state;

// Compute values of main signal and country signal
always @(state)
begin
    hwy = GREEN;  // Default light assignment
    cntry = RED;  // Default light assignment

    case (state)
        S0: ;
        S1: begin
                hwy = YELLOW;
                cntry = RED;
            end
        S2: begin
                hwy = RED;
                cntry = RED;
            end
        S3: begin
                hwy = RED;
                cntry = GREEN;
            end
        S4: begin
                hwy = RED;
                cntry = YELLOW;
            end
    endcase
end

// State machine using case statements
always @(*)
begin
    case (state)
        S0: begin if (X)
                    next_state = S1;
                 else
                    next_state = S0;
             end
        S1: // delay some positive edges of clock
            // repeat (`Y2RDELAY)
            // @(posedge clock);
            #100 next_state = S2;

        S2: // delay some positive edges of clock
            // repeat (`R2GDELAY)
            // @(posedge clock);
            #100 next_state = S3;

        S3: begin if (X)
                    next_state = S3;
                 else
                    next_state = S4;
             end
        S4: // delay some positive edges of clock
            // begin repeat (`Y2RDELAY)
            // @(posedge clock);
            #100 next_state = S0;
    endcase
end
endmodule
